#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 56
#define YY_END_OF_BUFFER 57
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[520] =
    {   0,
        0,    0,    0,    0,    8,    8,    2,    2,   57,   55,
       10,   11,   55,   40,   55,    1,   39,   55,   55,   46,
       47,   37,   35,   45,   36,   38,   26,   26,   44,   43,
       28,   34,   30,   52,   50,   51,   52,   52,   52,   52,
       52,   52,   52,   52,   48,   55,   49,    6,    6,    6,
        6,    6,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    8,    8,    9,    8,    8,
        8,    1,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    2,    2,    3,    2,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   12,   33,    0,   53,   41,    0,   54,    0,    4,
        7,    0,    0,   26,   25,   25,   25,   25,    0,   26,
        0,   29,   32,   31,   52,   52,   52,   52,   52,   52,
       20,   52,   52,   52,   52,   42,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    5,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    8,    8,    8,    8,
        8,    8,    8,    8,    4,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    0,   27,   26,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   24,   27,   52,   52,   52,   52,   23,   13,   52,
       52,   52,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       25,    0,   25,   24,   24,   24,   24,   52,   52,   52,
       21,   52,   52,   16,   52,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       25,   24,   17,   15,   52,   14,   52,   22,    6,    6,
        6,    6,    6,    6,    6,    6,    8,    8,    8,    8,
        8,    8,    8,    8,    2,    2,    2,    2,    2,    2,

        2,    2,   52,   19,    6,    6,    8,    8,    2,    2,
       52,    6,    8,    2,   18,    6,    8,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,    1,    1,   27,   27,   27,   27,   28,   27,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   30,   29,   29,
       31,    1,   32,    1,   33,    1,   34,   35,   36,   37,

       38,   39,   29,   40,   41,   29,   42,   43,   29,   44,
       45,   29,   29,   46,   47,   48,   49,   50,   51,   52,
       29,   29,   53,   54,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    1,    4,    1,    5,    5,
        5,    1,    6,    1,    1,    1,    5,    5,    5,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1
    } ;

static const flex_int16_t yy_base[538] =
    {   0,
        0,    0,   55,    0,  110,    0,  165,    0, 1729, 2339,
     2339, 2339, 1725, 1702, 1719, 2339, 2339, 1715, 1713, 2339,
     2339, 2339, 2339, 2339,  202,  211,  229,  268, 2339, 2339,
     1697, 1695, 1691,    0, 2339, 2339, 1665, 1645, 1646,  182,
      247, 1650, 1638, 1642, 2339, 1627, 2339, 1676, 1655, 1654,
     1653,  287,  289, 1648, 1647,  290,  291, 1646, 1645, 1629,
     1621, 1620,  294,  304,  322,  375, 1619, 1614,  295,  376,
      377,  411, 1613, 1612, 1568, 1568, 1547,  183,  261, 1551,
     1543, 1543, 1579,  257, 1578,    0,    0, 2339, 1577, 1554,
      313,    0,    0, 1549,  300,    0,    0,    0,    0,    0,

      362,  371,  463,  387,    0,    0, 1532, 1531, 1526,  500,
        0,    0, 1504, 1504, 1504,  342,  347, 1504, 1496, 1500,
        0, 1485,    0,    0,    0, 2339, 1534, 1511,  315,    0,
        0, 1526,  387,    0,    0,    0,    0,    0,  379,  375,
      552,  399,    0,    0, 1509, 1507, 1503,  589,    0,    0,
     1477, 1457, 1458,  366,  366, 1462, 1450, 1454,    0, 1439,
        0, 2339, 2339, 1485, 2339, 2339, 1460, 2339,  505, 2339,
     2339, 1446,  403,  625,  631,  638,  645,  651,  414,  687,
      423, 2339, 2339, 2339,    0, 1430, 1419, 1415, 1416, 1414,
        0, 1411, 1388, 1394, 1393, 2339, 1426, 1425, 1424, 1423,

      608,  609, 1422, 1399,  664,  706, 1397, 2339,  707, 1392,
      653,  708,  714,  721,  755,  701,  791,  811,  733,  806,
      861, 1391, 1390, 1389,    0, 1350, 1343, 1339, 1340, 1335,
        0, 1330, 1328, 1334, 1332, 1366,    0,    0,  740,    0,
        0,  418,    0,  760,    0,    0, 1343,  794,  866,  900,
      850,  936,  956,  512,  941,  663,    0,    0,    0,    0,
     1327, 1320, 1316, 1316, 1309,    0, 1306, 1305, 1310, 1309,
        0,    0,    0,  741,    0,    0,  426,    0,  801,    0,
        0, 1326,  853,  992, 1026, 1062, 1067, 1087,  693, 1082,
      767,    0,    0,    0,    0, 1310, 1302, 1290, 1271, 1268,

        0, 1261, 1260, 1266, 1261,    0, 1269,  816, 1123, 1129,
      948, 1139, 1149,    0, 1074, 1155, 1282,  905, 1162, 1169,
        0, 1203,  870, 1261,  261, 1254, 1256,    0,    0, 1240,
     1250, 1240,  617, 1144, 1253, 1257, 1240, 1265, 1283, 1256,
     1277, 1319, 1324, 1339, 1351, 1369,    0, 1403, 1181, 1243,
      795, 1238, 1241,    0,    0, 1222, 1232, 1224, 1234,  878,
     1363, 1242, 1437,  912, 1469, 1241,    0,  961, 1505, 1525,
      968, 1557,    0, 1591,  995, 1228,  818, 1220, 1202,    0,
        0, 1186, 1197, 1186, 1196, 1004, 1510, 1204, 1625, 1031,
     1657, 1203,    0, 1038, 1693, 1713, 1092, 1745,    0, 1779,

     1134, 1191,  925, 1154, 1152,    0,    0, 1131, 1136, 1128,
        0, 1698, 1174, 1813,    0,  998,    0, 1103, 1093, 1078,
        0, 1070, 1063,    0, 1066, 1847, 1897, 1884, 1915, 1939,
     1963,    0, 1056, 1048, 1051,    0, 1041, 1039,    0, 1042,
     1997, 1909,    0, 2029, 2053, 2077,    0, 1006,  962,  937,
        0,  922,  920,    0,  925, 2111, 2147,    0, 2165, 2189,
     2213,    0,  917,  906,  851,    0,  836,  833,    0,  839,
        0,    0,    0,    0,  831,    0,  824,    0,    0,    0,
        0,    0,  789,    0,  784,    0,    0,    0,    0,    0,
      780,    0,  772,    0,    0,    0,    0,    0,  701,    0,

      688,    0,  681,    0,  674,    0,  656,    0,  626,    0,
      635,  622,  609,  605,    0,    0,    0,    0, 2339, 2265,
     2271,  608, 2277, 2283, 2289, 2295, 2301, 2307, 2313, 2319,
     2325, 2328, 2330, 2333,  518,  412,  407
    } ;

static const flex_int16_t yy_def[538] =
    {   0,
      519,    1,  519,    3,  519,    5,  519,    7,  519,  519,
      519,  519,  519,  519,  520,  519,  519,  519,  521,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  522,  519,  519,  522,  522,  522,  522,
      522,  522,  522,  522,  519,  519,  519,  523,  523,  523,
      523,  523,  524,  523,  523,  523,  525,  523,  523,  519,
      523,  523,  523,  523,  519,  523,  523,  523,  523,  523,
      523,  523,  523,  523,   72,   72,   72,   72,   72,   72,
       72,   72,  523,  523,  523,  526,  526,  519,  526,  526,
      527,  526,  526,  526,  528,  526,  526,  526,  526,  526,

      526,  526,  519,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  110,  110,  110,  110,  110,  110,  110,  110,
      526,  526,  526,  529,  529,  519,  529,  529,  530,  529,
      529,  529,  531,  529,  529,  529,  529,  529,  529,  529,
      519,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      148,  148,  148,  148,  148,  148,  148,  148,  529,  529,
      529,  519,  519,  520,  519,  519,  521,  519,  519,  519,
      519,  519,  519,  532,  533,  533,  533,  519,  519,  519,
      519,  519,  519,  519,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  519,  523,  523,  523,  523,

      524,  524,  523,  523,  525,  525,  523,  519,  523,  523,
      523,  523,  523,   72,  214,  215,  215,   72,  523,  523,
      523,  523,  523,  523,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,  523,  526,  526,  527,  526,
      526,  528,  526,  526,  526,  526,  526,  526,  526,  249,
      250,  250,  526,  526,  526,  526,  526,  526,  526,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      526,  529,  529,  530,  529,  529,  531,  529,  529,  529,
      529,  529,  529,  529,  284,  285,  285,  529,  529,  529,
      529,  529,  529,  529,  148,  148,  148,  148,  148,  148,

      148,  148,  148,  148,  148,  529,  519,  519,  519,  533,
      533,  533,  534,  310,  533,  533,  534,  534,  533,  519,
      178,  519,  519,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  523,  523,  523,  215,  215,  215,  215,  215,
      215,  215,  339,  339,  215,  218,  218,  218,  523,   72,
       72,   72,   72,   72,   72,   72,   72,   72,  526,  526,
      526,  250,  526,  363,  250,  250,  363,  363,  365,  363,
      363,  253,  253,  253,  526,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  529,  529,  529,  285,  529,  389,
      285,  285,  389,  389,  391,  389,  389,  288,  288,  288,

      529,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      535,  519,  534,  519,  536,  537,  322,  522,  522,  522,
      522,  522,  522,  522,  522,   72,  523,  339,  348,  429,
      348,  348,   72,   72,   72,   72,   72,   72,   72,   72,
      110,  526,  370,  374,  444,  374,  374,  110,  110,  110,
      110,  110,  110,  110,  110,  148,  529,  396,  400,  459,
      400,  400,  148,  148,  148,  148,  148,  148,  148,  148,
      535,  414,  522,  522,  522,  522,  522,  522,  426,  429,
       72,   72,   72,   72,   72,   72,  441,  444,  110,  110,
      110,  110,  110,  110,  456,  459,  148,  148,  148,  148,

      148,  148,  522,  522,   72,   72,  110,  110,  148,  148,
      522,   72,  110,  148,  522,   72,  110,  148,    0,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519
    } ;

static const flex_int16_t yy_nxt[2395] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   10,   26,   27,   28,
       28,   29,   30,   31,   32,   33,   34,   34,   34,   34,
       35,   36,   34,   34,   37,   38,   34,   39,   40,   34,
       41,   34,   34,   34,   34,   42,   34,   34,   34,   43,
       44,   34,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   48,   64,   65,   66,   66,   67,   68,   69,   70,
       71,   72,   72,   72,   72,   73,   74,   72,   72,   75,
       76,   72,   77,   78,   72,   79,   72,   72,   72,   72,

       80,   72,   72,   72,   81,   82,   72,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,   86,  102,  103,  104,
      104,  105,  106,  107,  108,  109,  110,  110,  110,  110,
      111,  112,  110,  110,  113,  114,  110,  115,  116,  110,
      117,  110,  110,  110,  110,  118,  110,  110,  110,  119,
      120,  110,  121,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  124,  140,  141,  142,  142,  143,  144,  145,  146,
      147,  148,  148,  148,  148,  149,  150,  148,  148,  151,

      152,  148,  153,  154,  148,  155,  148,  148,  148,  148,
      156,  148,  148,  148,  157,  158,  148,  159,  160,  161,
      169,  169,  169,  170,  189,  229,  190,  230,  171,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  173,  172,  174,  174,  175,
      172,  172,  172,  172,  172,  176,  177,  176,  178,  198,
      172,  172,  176,  176,  176,  176,  177,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      178,  172,  172,  172,  179,  191,  180,  180,  180,  198,
      192,  202,  198,  206,  203,  181,  198,  198,  204,  231,

      207,  164,  167,  167,  232,  181,  198,  419,  420,  243,
      236,  200,  209,  209,  209,  164,  170,  164,  240,  222,
      275,  210,  211,  211,  212,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  172,  211,  211,  211,  213,  211,
      214,  214,  215,  211,  211,  211,  211,  211,  216,  217,
      216,  218,  197,  211,  211,  216,  216,  216,  216,  217,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  218,  211,  211,  211,  198,  198,  198,
      244,  244,  244,  245,  264,  266,  265,  280,  246,  167,
      267,  219,  281,  220,  220,  220,  278,  279,  279,  279,

      223,  224,  221,  254,  301,  255,  255,  255,  299,  302,
      300,  416,  221,  198,  256,  289,  415,  290,  290,  290,
      167,  308,  308,  308,  256,  307,  291,  243,  167,  225,
      225,  225,  308,  308,  308,  278,  291,  225,  225,  225,
      225,  323,  323,  323,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  247,  247,  172,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  248,
      247,  249,  249,  250,  247,  247,  247,  247,  247,  251,
      252,  251,  253,  237,  247,  247,  251,  251,  251,  251,

      252,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  253,  247,  247,  247,  260,  260,
      260,  179,  471,  169,  169,  169,  260,  260,  260,  260,
      360,  360,  360,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  282,  282,  172,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  283,  282,
      284,  284,  285,  282,  282,  282,  282,  282,  286,  287,
      286,  288,  272,  282,  282,  286,  286,  286,  286,  287,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,

      286,  286,  286,  288,  282,  282,  282,  295,  295,  295,
      202,  202,  185,  203,  203,  295,  295,  295,  295,  198,
      164,  164,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  179,  518,  309,  309,  310,  517,  179,  426,  313,
      313,  314,  312,  307,  519,  198,  317,  317,  316,  516,
      307,  519,  312,  318,  318,  319,  206,  307,  316,  320,
      320,  321,  515,  207,  514,  333,  167,  321,  321,  322,
      322,  375,  375,  375,  321,  321,  321,  321,  321,  321,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  179,  513,  180,  180,  180,  206,  198,
      198,  386,  386,  386,  181,  207,  198,  197,  167,  343,
      343,  341,  512,  219,  181,  209,  209,  209,  341,  511,
      333,  510,  334,  334,  334,  198,  333,  219,  341,  335,
      335,  336,  164,  164,  509,  240,  275,  337,  338,  337,
      337,  334,  334,  334,  337,  337,  337,  337,  338,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  339,  339,  340,  254,  333,  244,  244,
      244,  341,  342,  341,  341,  401,  401,  401,  341,  341,
      341,  341,  342,  341,  341,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  197,  198,  344,
      344,  345,  360,  360,  360,  508,  359,  289,  341,  279,
      279,  279,  219,  507,  220,  220,  220,  506,  341,  346,
      346,  347,  505,  221,  308,  308,  308,  347,  347,  348,
      348,  434,  435,  221,  347,  347,  347,  347,  347,  347,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  198,  449,  450,  237,  504,  369,  369,
      367,  386,  386,  386,  503,  385,  502,  367,  501,  349,
      349,  349,  254,  500,  361,  361,  362,  367,  323,  323,
      323,  499,  363,  364,  363,  363,  360,  360,  360,  363,

      363,  363,  363,  364,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  365,  365,
      366,  519,  359,  318,  318,  318,  367,  368,  367,  367,
      370,  370,  371,  367,  367,  367,  367,  368,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  237,  498,  370,  370,  371,  254,  497,  255,
      255,  255,  494,  367,  519,  493,  317,  317,  256,  492,
      519,  464,  465,  367,  372,  372,  373,  491,  256,  370,
      370,  371,  373,  373,  374,  374,  370,  370,  371,  373,
      373,  373,  373,  373,  373,  374,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  289,  490,
      387,  387,  388,  375,  375,  375,  415,  415,  389,  390,
      389,  389,  386,  386,  386,  389,  389,  389,  389,  390,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  391,  391,  392,  489,  385,  396,
      396,  397,  393,  394,  393,  393,  396,  396,  397,  393,
      393,  393,  393,  394,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  272,  486,
      395,  395,  393,  272,  485,  396,  396,  397,  484,  393,
      519,  483,  317,  317,  393,  482,  519,  481,  289,  393,

      290,  290,  290,  478,  393,  398,  398,  399,  477,  291,
      396,  396,  397,  399,  399,  400,  400,  476,  475,  291,
      399,  399,  399,  399,  399,  399,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  179,
      474,  309,  309,  412,  473,  179,  198,  313,  313,  314,
      181,  519,  401,  401,  401,  519,  316,  318,  318,  319,
      181,  519,  334,  334,  334,  179,  316,  313,  313,  313,
      470,  519,  469,  318,  318,  319,  413,  519,  519,  468,
      318,  318,  319,  198,  519,  467,  413,  320,  320,  320,
      519,  466,  318,  318,  318,  320,  320,  414,  414,  349,

      349,  349,  320,  320,  320,  320,  320,  320,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  415,  415,  416,  463,  272,  272,  456,  455,  416,
      416,  417,  417,  454,  453,  452,  416,  416,  416,  416,
      416,  416,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  198,  197,  451,  343,  343,
      341,  448,  197,  237,  237,  441,  440,  341,  439,  219,
      438,  335,  335,  427,  437,  436,  433,  341,  197,  197,
      221,  197,  425,  344,  344,  345,  424,  197,  423,  422,
      221,  421,  341,  197,  418,  343,  343,  341,  519,  197,

      411,  410,  341,  339,  341,  197,  409,  408,  407,  343,
      428,  343,  343,  406,  341,  405,  343,  343,  343,  343,
      428,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  197,  404,  344,  344,  345,
      197,  197,  343,  343,  343,  403,  341,  402,  385,  384,
      383,  343,  382,  381,  380,  197,  341,  344,  344,  344,
      379,  343,  378,  377,  376,  359,  343,  197,  198,  344,
      344,  345,  358,  197,  357,  356,  343,  355,  341,  254,
      354,  361,  361,  442,  353,  352,  351,  350,  341,  346,
      256,  198,  198,  198,  198,  346,  346,  429,  429,  198,

      256,  198,  346,  346,  346,  346,  346,  346,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  430,  430,  431,  198,  198,  198,  198,  198,  431,
      431,  432,  432,  332,  331,  330,  431,  431,  431,  431,
      431,  431,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  369,  369,  367,  329,  328,
      327,  326,  325,  367,  367,  367,  367,  324,  307,  168,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  365,
      165,  237,  306,  305,  304,  369,  443,  369,  369,  303,

      298,  297,  369,  369,  369,  369,  443,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  237,  296,  369,  369,  369,  289,  294,  387,  387,
      457,  293,  369,  292,  276,  273,  162,  291,  271,  270,
      269,  268,  369,  370,  370,  370,  263,  291,  262,  261,
      259,  369,  369,  369,  369,  258,  257,  241,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  372,  238,  162,
      198,  198,  235,  372,  372,  444,  444,  234,  233,  228,
      372,  372,  372,  372,  372,  372,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  445,
      445,  446,  227,  226,  198,  198,  198,  446,  446,  447,
      447,  198,  198,  198,  446,  446,  446,  446,  446,  446,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  395,  395,  393,  208,  198,  198,  198,
      198,  393,  393,  393,  393,  199,  198,  198,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  391,  198,  272,
      196,  195,  194,  395,  458,  395,  395,  193,  188,  187,
      395,  395,  395,  395,  458,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  272,
      186,  395,  395,  395,  179,  184,  412,  412,  412,  183,
      395,  182,  168,  166,  165,  181,  163,  162,  519,  519,
      395,  396,  396,  396,  519,  181,  519,  519,  519,  395,
      395,  395,  395,  519,  519,  519,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  398,  519,  519,  519,  519,
      519,  398,  398,  459,  459,  519,  519,  519,  398,  398,
      398,  398,  398,  398,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  460,  460,  461,

      519,  519,  519,  519,  519,  461,  461,  462,  462,  519,
      519,  519,  461,  461,  461,  461,  461,  461,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  415,  415,  415,  519,  519,  519,  519,  519,  415,
      415,  472,  472,  519,  519,  519,  415,  415,  415,  415,
      415,  415,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  479,  479,  479,  519,  519,
      519,  519,  519,  479,  479,  479,  479,  519,  519,  519,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  198,

      197,  519,  344,  344,  344,  519,  519,  519,  519,  519,
      519,  343,  519,  219,  519,  427,  427,  427,  519,  519,
      519,  343,  519,  519,  221,  254,  519,  442,  442,  442,
      519,  519,  519,  519,  221,  430,  256,  519,  519,  519,
      519,  430,  430,  480,  480,  519,  256,  519,  430,  430,
      430,  430,  430,  430,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  430,  430,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  431,  431,  519,  519,  519,  519,  519,  519,  519,

      519,  519,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  487,  487,  487,  519,  519,
      519,  519,  519,  487,  487,  487,  487,  519,  519,  519,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  445,
      519,  519,  519,  519,  519,  445,  445,  488,  488,  519,
      519,  519,  445,  445,  445,  445,  445,  445,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  445,  445,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  446,  446,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  495,
      495,  495,  519,  519,  519,  519,  519,  495,  495,  495,
      495,  519,  519,  519,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  289,  519,  457,  457,  457,  519,  519,
      519,  519,  519,  519,  291,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  291,  460,  519,  519,  519,  519,
      519,  460,  460,  496,  496,  519,  519,  519,  460,  460,

      460,  460,  460,  460,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  460,  460,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  461,  461,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  164,  164,  164,  164,  164,
      164,  167,  167,  167,  167,  167,  167,  197,  197,  519,
      197,  197,  197,  201,  201,  201,  201,  201,  201,  205,
      205,  205,  205,  205,  205,  237,  519,  237,  237,  237,

      237,  239,  239,  239,  239,  239,  239,  242,  242,  242,
      242,  242,  242,  272,  519,  272,  272,  272,  272,  274,
      274,  274,  274,  274,  274,  277,  277,  277,  277,  277,
      277,  311,  311,  315,  315,  315,  317,  317,    9,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519

    } ;

static const flex_int16_t yy_chk[2395] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       25,   25,   25,   26,   40,   78,   40,   78,   26,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   84,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   28,   41,   28,   28,   28,   52,
       41,   53,   56,   57,   53,   28,   63,   69,   56,   79,

       57,   53,   95,   57,   79,   28,   64,  325,  325,   95,
       84,   52,   63,   63,   63,   91,   64,  129,   91,   69,
      129,   64,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   66,   70,   71,
      101,  101,  101,  102,  116,  117,  116,  140,  102,  133,
      117,   66,  140,   66,   66,   66,  133,  139,  139,  139,

       70,   71,   66,  104,  155,  104,  104,  104,  154,  155,
      154,  537,   66,   72,  104,  142,  536,  142,  142,  142,
      242,  173,  173,  173,  104,  173,  142,  242,  277,   72,
       72,   72,  179,  179,  179,  277,  142,   72,   72,   72,
       72,  181,  181,  181,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  110,  110,
      110,  169,  535,  169,  169,  169,  110,  110,  110,  110,
      254,  254,  254,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  148,  148,  148,
      201,  202,  522,  201,  202,  148,  148,  148,  148,  333,
      201,  202,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  174,  514,  174,  174,  174,  513,  175,  333,  175,
      175,  175,  174,  175,  176,  211,  176,  176,  175,  512,
      176,  177,  174,  177,  177,  177,  205,  177,  175,  178,
      178,  178,  511,  205,  509,  211,  205,  178,  178,  178,
      178,  256,  256,  256,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  180,  507,  180,  180,  180,  206,  209,
      212,  289,  289,  289,  180,  206,  213,  216,  206,  216,
      216,  216,  505,  209,  180,  209,  209,  209,  216,  503,
      212,  501,  213,  213,  213,  219,  213,  214,  216,  214,
      214,  214,  239,  274,  499,  239,  274,  214,  214,  214,
      214,  219,  219,  219,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  215,  215,  215,  244,  215,  244,  244,
      244,  215,  215,  215,  215,  291,  291,  291,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  215,  217,  220,  217,
      217,  217,  248,  248,  248,  493,  248,  279,  217,  279,
      279,  279,  220,  491,  220,  220,  220,  485,  217,  218,
      218,  218,  483,  220,  308,  308,  308,  218,  218,  218,
      218,  351,  351,  220,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  221,  377,  377,  251,  477,  251,  251,
      251,  283,  283,  283,  475,  283,  470,  251,  468,  221,
      221,  221,  249,  467,  249,  249,  249,  251,  323,  323,
      323,  465,  249,  249,  249,  249,  360,  360,  360,  249,

      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  250,  250,
      250,  318,  250,  318,  318,  318,  250,  250,  250,  250,
      364,  364,  364,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  252,  464,  252,  252,  252,  255,  463,  255,
      255,  255,  455,  252,  311,  453,  311,  311,  255,  452,
      311,  403,  403,  252,  253,  253,  253,  450,  255,  368,
      368,  368,  253,  253,  253,  253,  371,  371,  371,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  284,  449,
      284,  284,  284,  375,  375,  375,  416,  416,  284,  284,
      284,  284,  386,  386,  386,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  285,  285,  285,  448,  285,  390,
      390,  390,  285,  285,  285,  285,  394,  394,  394,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  286,  440,
      286,  286,  286,  287,  438,  287,  287,  287,  437,  286,
      315,  435,  315,  315,  287,  434,  315,  433,  290,  286,

      290,  290,  290,  425,  287,  288,  288,  288,  423,  290,
      397,  397,  397,  288,  288,  288,  288,  422,  420,  290,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  309,
      419,  309,  309,  309,  418,  310,  334,  310,  310,  310,
      309,  310,  401,  401,  401,  312,  310,  312,  312,  312,
      309,  312,  334,  334,  334,  313,  310,  313,  313,  313,
      410,  316,  409,  316,  316,  316,  313,  316,  319,  408,
      319,  319,  319,  349,  319,  405,  313,  320,  320,  320,
      413,  404,  413,  413,  413,  320,  320,  320,  320,  349,

      349,  349,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  322,  322,  322,  402,  392,  388,  385,  384,  322,
      322,  322,  322,  383,  382,  379,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  335,  337,  378,  337,  337,
      337,  376,  337,  366,  362,  359,  358,  337,  357,  335,
      356,  335,  335,  335,  353,  352,  350,  337,  340,  336,
      335,  338,  332,  338,  338,  338,  331,  338,  330,  327,
      335,  326,  338,  341,  324,  341,  341,  341,  317,  341,

      307,  305,  338,  339,  341,  339,  304,  303,  302,  339,
      339,  339,  339,  300,  341,  299,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  342,  298,  342,  342,  342,
      343,  342,  343,  343,  343,  297,  342,  296,  282,  270,
      269,  343,  268,  267,  265,  344,  342,  344,  344,  344,
      264,  343,  263,  262,  261,  247,  344,  345,  236,  345,
      345,  345,  235,  345,  234,  233,  344,  232,  345,  361,
      230,  361,  361,  361,  229,  228,  227,  226,  345,  346,
      361,  224,  223,  222,  210,  346,  346,  346,  346,  207,

      361,  204,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  348,  348,  348,  203,  200,  199,  198,  197,  348,
      348,  348,  348,  195,  194,  193,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  363,  363,  363,  192,  190,
      189,  188,  187,  363,  363,  363,  363,  186,  172,  167,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  365,
      164,  365,  160,  158,  157,  365,  365,  365,  365,  156,

      153,  152,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  369,  151,  369,  369,  369,  387,  147,  387,  387,
      387,  146,  369,  145,  132,  128,  127,  387,  122,  120,
      119,  118,  369,  370,  370,  370,  115,  387,  114,  113,
      109,  370,  370,  370,  370,  108,  107,   94,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  372,   90,   89,
       85,   83,   82,  372,  372,  372,  372,   81,   80,   77,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  374,
      374,  374,   76,   75,   74,   73,   68,  374,  374,  374,
      374,   67,   62,   61,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  389,  389,  389,   60,   59,   58,   55,
       54,  389,  389,  389,  389,   51,   50,   49,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  391,   48,  391,
       46,   44,   43,  391,  391,  391,  391,   42,   39,   38,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  395,
       37,  395,  395,  395,  412,   33,  412,  412,  412,   32,
      395,   31,   19,   18,   15,  412,   14,   13,    9,    0,
      395,  396,  396,  396,    0,  412,    0,    0,    0,  396,
      396,  396,  396,    0,    0,    0,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  398,    0,    0,    0,    0,
        0,  398,  398,  398,  398,    0,    0,    0,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  400,  400,  400,

        0,    0,    0,    0,    0,  400,  400,  400,  400,    0,
        0,    0,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  414,  414,  414,    0,    0,    0,    0,    0,  414,
      414,  414,  414,    0,    0,    0,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  426,  426,  426,    0,    0,
        0,    0,    0,  426,  426,  426,  426,    0,    0,    0,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  427,

      428,    0,  428,  428,  428,    0,    0,    0,    0,    0,
        0,  428,    0,  427,    0,  427,  427,  427,    0,    0,
        0,  428,    0,    0,  427,  442,    0,  442,  442,  442,
        0,    0,    0,    0,  427,  429,  442,    0,    0,    0,
        0,  429,  429,  429,  429,    0,  442,    0,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  430,  430,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  431,  431,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  441,  441,  441,    0,    0,
        0,    0,    0,  441,  441,  441,  441,    0,    0,    0,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  444,
        0,    0,    0,    0,    0,  444,  444,  444,  444,    0,
        0,    0,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  445,  445,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  446,  446,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  456,
      456,  456,    0,    0,    0,    0,    0,  456,  456,  456,
      456,    0,    0,    0,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  457,    0,  457,  457,  457,    0,    0,
        0,    0,    0,    0,  457,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  457,  459,    0,    0,    0,    0,
        0,  459,  459,  459,  459,    0,    0,    0,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  460,  460,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  461,  461,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  520,  520,  520,  520,  520,
      520,  521,  521,  521,  521,  521,  521,  523,  523,    0,
      523,  523,  523,  524,  524,  524,  524,  524,  524,  525,
      525,  525,  525,  525,  525,  526,    0,  526,  526,  526,

      526,  527,  527,  527,  527,  527,  527,  528,  528,  528,
      528,  528,  528,  529,    0,  529,  529,  529,  529,  530,
      530,  530,  530,  530,  530,  531,  531,  531,  531,  531,
      531,  532,  532,  533,  533,  533,  534,  534,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519

    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[57] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "sysy.l"
#line 2 "sysy.l"
#include<stdio.h>
#include "astTree.h"
#include"sysy.tab.hpp"
#include<iostream>
using namespace std;

extern char* yytext;
extern int atoi();
extern double atof();
#define YY_TYPEDEF_YY_SIZE_T
#define YY_USER_ACTION
//#define RETURN_TOKEN(name) yylval.String=yytext;printf("%s:<%s,%d>\n",yytext,#name,name);return name;
#define RETURN_TOKEN(name) \
    yylval.node=NewAst(#name,#name,yylineno,0);\
    yylval.node->val=yytext;\
    printf("%s:<%s,%d>\n",yytext,#name,name);\
    return name;

#line 1193 "lex.yy.cpp"
#define YY_NO_INPUT 1

#line 1196 "lex.yy.cpp"

#define INITIAL 0
#define COMMENT 1
#define LINECOMMENT 2
#define PREPROCESS 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 49 "sysy.l"


#line 1417 "lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 520 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2339 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 51 "sysy.l"
{BEGIN(PREPROCESS);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 52 "sysy.l"

	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 53 "sysy.l"
{BEGIN(INITIAL);}
	YY_BREAK
case YY_STATE_EOF(PREPROCESS):
#line 54 "sysy.l"
{BEGIN(INITIAL);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "sysy.l"
{BEGIN(COMMENT);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "sysy.l"
{BEGIN(INITIAL);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 58 "sysy.l"

	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 59 "sysy.l"
{return 0;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "sysy.l"
{BEGIN(LINECOMMENT);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 61 "sysy.l"

	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 62 "sysy.l"
{BEGIN(INITIAL);}
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
#line 63 "sysy.l"
{BEGIN(INITIAL);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 65 "sysy.l"
{}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 66 "sysy.l"
{}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 67 "sysy.l"
{}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 68 "sysy.l"
RETURN_TOKEN(INT);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 69 "sysy.l"
RETURN_TOKEN(FLOAT);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "sysy.l"
RETURN_TOKEN(CONST);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "sysy.l"
RETURN_TOKEN(VOID);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 72 "sysy.l"
RETURN_TOKEN(BREAK);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 73 "sysy.l"
RETURN_TOKEN(CONTINUE);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 74 "sysy.l"
RETURN_TOKEN(RETURN);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 75 "sysy.l"
RETURN_TOKEN(IF);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 76 "sysy.l"
RETURN_TOKEN(ELSE);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 77 "sysy.l"
RETURN_TOKEN(WHILE);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 78 "sysy.l"
RETURN_TOKEN(FOR);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 79 "sysy.l"
{
    RETURN_TOKEN(ILLEGAL_HEX_CONST);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 82 "sysy.l"
{
    if(strlen(yytext)>2&&yytext[1]=='x'||yytext[1]=='X'){
        RETURN_TOKEN (INTNUM);
    }
    RETURN_TOKEN(ILLEGAL_OCTAL_CONST);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "sysy.l"
{
    RETURN_TOKEN(INTNUM);
    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 90 "sysy.l"
RETURN_TOKEN(FLOATNUM);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 92 "sysy.l"
RETURN_TOKEN(LT);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 93 "sysy.l"
RETURN_TOKEN(LE);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 94 "sysy.l"
RETURN_TOKEN(GT);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 95 "sysy.l"
RETURN_TOKEN(GE);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 96 "sysy.l"
RETURN_TOKEN(EQ);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 97 "sysy.l"
RETURN_TOKEN(NE);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 98 "sysy.l"
RETURN_TOKEN(ASSIGN);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 99 "sysy.l"
RETURN_TOKEN(ADD);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 100 "sysy.l"
RETURN_TOKEN(SUB);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 101 "sysy.l"
RETURN_TOKEN(MUL);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 102 "sysy.l"
RETURN_TOKEN(DIV);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 103 "sysy.l"
RETURN_TOKEN(MOD);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 104 "sysy.l"
RETURN_TOKEN(NOT);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 105 "sysy.l"
RETURN_TOKEN(AND);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 106 "sysy.l"
RETURN_TOKEN(OR);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 107 "sysy.l"
RETURN_TOKEN(SEMI);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 108 "sysy.l"
RETURN_TOKEN(COLON);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 109 "sysy.l"
RETURN_TOKEN(COMMA);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 110 "sysy.l"
RETURN_TOKEN(L);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 111 "sysy.l"
RETURN_TOKEN(R);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 112 "sysy.l"
RETURN_TOKEN(OB);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 113 "sysy.l"
RETURN_TOKEN(CB);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 114 "sysy.l"
RETURN_TOKEN(LB);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 115 "sysy.l"
RETURN_TOKEN(RB);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 116 "sysy.l"
RETURN_TOKEN(Ident);
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 118 "sysy.l"
RETURN_TOKEN(SSS);
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 119 "sysy.l"
RETURN_TOKEN(SSS);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 120 "sysy.l"
printf("Error type [character] at line [%d] :Invalid character %c \n",yylineno,yytext[0]);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 121 "sysy.l"
ECHO;
	YY_BREAK
#line 1792 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 520 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 520 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 519);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 121 "sysy.l"


